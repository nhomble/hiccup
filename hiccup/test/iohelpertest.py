import random
import unittest

import hiccup.iohelper as io


class IOHelperTest(unittest.TestCase):
    def test_bin_string(self):
        self.assertEqual("11", io.bin_string(3))

    def test_padded_bs_2_bytes(self):
        out = io.padded_bs_2_bytes("101")
        self.assertEqual(b'\x05\xa0', out)

    def test_padded_bytes_2_bs(self):
        out = io.padded_bytes_2_bs(bytearray(b'\x05\xa0'))
        self.assertEqual(out, "101")

    def test_s2b_assertion(self):
        self.assertRaises(AssertionError, io.bin_string_as_bytes, '0')
        self.assertRaises(AssertionError, io.bin_string_as_bytes, '')

    def _check_pb(self, s):
        out = io.padded_bs_2_bytes(s)
        invert = io.padded_bytes_2_bs(out)
        self.assertEqual(s, invert, msg=s)

    def test_padding_and_back(self):
        cases = [
            "01",
            "0000",
            "1010000",
            "00000",
            "000111",
            "00000001",
            "000001",
            "0000001",
            "10010110",
        ]
        for case in cases:
            self._check_pb(case)

    def test_random(self):
        for _ in range(100):
            i = random.randint(0, 100000)
            b = io.bin_string(i)
            self._check_pb(b)

    def test_long_bug(self):
        s
        self._check_pb(s)
